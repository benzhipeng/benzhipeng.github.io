<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>benzhipengの博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-19T07:49:22.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>benzhipeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SwiftyAttributes源码浅析</title>
    <link href="http://yoursite.com/2017/04/19/SwiftyAttributes/"/>
    <id>http://yoursite.com/2017/04/19/SwiftyAttributes/</id>
    <published>2017-04-19T07:44:29.000Z</published>
    <updated>2017-04-19T07:49:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>这次介绍的是一个很好用的第三方库 <strong>SwiftyAttributes</strong> ,顾名思义就是用来操作attributeString的。首先我们先来看一下传统方式创建一个attributeString，是怎么实现的，代码如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> attributes: [<span class="type">String</span>: <span class="type">Any</span>] = [</div><div class="line">    <span class="type">NSForegroundColorAttributeName</span>: <span class="type">UIColor</span>.blue, </div><div class="line">    <span class="type">NSUnderlineStyleAttributeName</span>:  <span class="type">NSNumber</span>(value: <span class="type">NSUnderlineStyle</span>.styleSingle.rawValue)</div><div class="line">]</div><div class="line"><span class="keyword">let</span> fancyString = <span class="type">NSAttributedString</span>(string: <span class="string">"Hello World!"</span>, attributes: attributes)</div></pre></td></tr></table></figure>
<p>再来看一下 <strong>SwiftyAttributes</strong> 是怎么创建的，代码如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fancyString = <span class="string">"Hello World!"</span>.withTextColor(.blue).withUnderlineStyle(.styleSingle)</div></pre></td></tr></table></figure>
<p>同时你也可以通过系统重新定义的运算符 <strong>+</strong> ，很容易就能实现两个attributeString的拼接，代码如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fancyString = <span class="string">"Hello"</span>.withFont(.systemFont(ofSize: <span class="number">12</span>))+ <span class="string">"World!"</span>.withFont(.systemFont(ofSize: <span class="number">18</span>))</div></pre></td></tr></table></figure>
<p>对比一下，是不是发现使用<strong>SwiftyAttributes</strong>来创建一个attributeString超级简单呢，那么接下来我们来了解一下它的整个实现过程。</p>
<h2 id="String-SwiftyAttributes-swift"><a href="#String-SwiftyAttributes-swift" class="headerlink" title="String+SwiftyAttributes.swift"></a>String+SwiftyAttributes.swift</h2><p>主要对String进行了扩展，分为两个扩展，第一个扩展是单个attribute的扩展，用于对String直接添加attribute，例如：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"Hello World!"</span>.withTextColor(.blue)</div></pre></td></tr></table></figure>
<p>withTextColor 只是一个attribute，还有其他的attribute，比如:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">withFont</span><span class="params">(<span class="number">_</span> font: Font)</span></span> -&gt; <span class="type">NSMutableAttributedString</span>&#123;&#125;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">withParagraphStyle</span><span class="params">(<span class="number">_</span> style: ParagraphStyle)</span></span> -&gt; <span class="type">NSMutableAttributedString</span> &#123;&#125;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">withTextColor</span><span class="params">(<span class="number">_</span> color: Color)</span></span> -&gt; <span class="type">NSMutableAttributedString</span> &#123;&#125;</div><div class="line">....</div></pre></td></tr></table></figure>
<p>每一个attribute的方法中都会调用一个方法，然后返回attributeString，代码如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">withFont</span><span class="params">(<span class="number">_</span> font: Font)</span></span> -&gt; <span class="type">NSMutableAttributedString</span> &#123;</div><div class="line">	<span class="keyword">return</span> withAttribute(.font(font))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>withAttribute方法也是String的一个扩展，支持多个attribute，方法如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//添加多个attribute</span></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">withAttributes</span><span class="params">(<span class="number">_</span> attributes: [Attribute])</span></span> -&gt; <span class="type">NSMutableAttributedString</span> &#123;       	<span class="keyword">return</span> attributedString.withAttributes(attributes)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">//添加单个attribute</span></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">withAttribute</span><span class="params">(<span class="number">_</span> attribute: Attribute)</span></span> -&gt; <span class="type">NSMutableAttributedString</span> &#123;</div><div class="line">    <span class="keyword">return</span> attributedString.withAttribute(attribute)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="comment">//创建一个mutableAttributeString</span></div><div class="line"> <span class="keyword">public</span> <span class="keyword">var</span> attributedString: <span class="type">NSMutableAttributedString</span> &#123;</div><div class="line">     <span class="keyword">return</span> <span class="type">NSMutableAttributedString</span>(string: <span class="keyword">self</span>)</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">//使用如下</span></div><div class="line"> <span class="keyword">let</span> fancyString = <span class="string">"Hello World!"</span>.withAttributes([</div><div class="line">    .backgroundColor(.magenta),</div><div class="line">    .strokeColor(.orange)</div><div class="line">])</div></pre></td></tr></table></figure>
<h2 id="NSAttributedString-SwiftyAttributes-swift"><a href="#NSAttributedString-SwiftyAttributes-swift" class="headerlink" title="NSAttributedString+SwiftyAttributes.swift"></a>NSAttributedString+SwiftyAttributes.swift</h2><p>类似String的扩展，该文件也包括对NSAttributedString的两部分扩展，第一部分也是单个attribute的扩展，这边就不多列举代码，就简单贴一下使用方法，代码如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> helloWorld = <span class="string">"Hello World!"</span>.withTextColor(.blue)</div><div class="line"><span class="comment">//此时helloWorld就是一个NSMutableAttributeString</span></div><div class="line">helloWorld = helloWorld.withUnderlineStyle(.styleSingle)</div></pre></td></tr></table></figure>
<p>另一个扩展支持对attributeString的创建和添加attribute，还包含已知一个attributeString，然后获取它的attribute的方法。创建attributeString和在现有attributeString上添加attribute的方法有下面几个:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过给定一个string和attribute 来生成一个attributeString</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(string str: <span class="type">String</span>, attributes: [<span class="type">Attribute</span>]) &#123;</div><div class="line">	<span class="keyword">self</span>.<span class="keyword">init</span>(string: str, attributes: dictionary(from: attributes))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//可以给定多个attribute来修改attributeString</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">withAttributes</span><span class="params">(<span class="number">_</span> attributes: [Attribute])</span></span> -&gt; <span class="type">NSMutableAttributedString</span> &#123;</div><div class="line">    <span class="keyword">let</span> mutable = mutableCopy() <span class="keyword">as</span>! <span class="type">NSMutableAttributedString</span></div><div class="line">    mutable.addAttributes(dictionary(from: attributes), range: <span class="type">NSRange</span>(location: <span class="number">0</span>, length: length))</div><div class="line">    <span class="keyword">return</span> mutable</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//给定单个attribute</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">withAttribute</span><span class="params">(<span class="number">_</span> attribute: Attribute)</span></span> -&gt; <span class="type">NSMutableAttributedString</span> &#123;</div><div class="line">    <span class="keyword">return</span> withAttributes([attribute])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//返回给定range的attributeString</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">attributedSubstring</span><span class="params">(from range: Range&lt;Int&gt;)</span></span> -&gt; <span class="type">NSAttributedString</span> &#123;</div><div class="line">    <span class="keyword">return</span> attributedSubstring(from: <span class="type">NSRange</span>(range))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意到在给attributeString添加attribute的时候，有一个 <strong>dictionary(from: attributes)</strong> 方法，该方法主要是将 [Attribute] 转化为 [String : Any], 具体实现代码如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dictionary</span><span class="params">(from attributes: [Attribute])</span></span> -&gt; [<span class="type">String</span>: <span class="type">Any</span>] &#123;</div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">String</span>: <span class="type">Any</span>]()</div><div class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> attributes &#123;</div><div class="line">        dict[attr.keyName] = attr.foundationValue</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dict</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来几个方法是从attributeString中获取attribute，代码如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//给定attribute名字，查找位置，查找范围，返回attribute</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">attribute</span><span class="params">(<span class="number">_</span> attrName: Attribute.Name, at location: Int, effectiveRange range: NSRangePointer? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">Attribute</span>? &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> attributeValue = attribute(attrName.rawValue, at: location, effectiveRange: range) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Attribute</span>(name: attrName, foundationValue: attributeValue)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//给定范围 返回 ([Attribute],Range&lt;Int&gt;)</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">attributes</span><span class="params">(<span class="keyword">in</span> range: Range&lt;Int&gt;, options: NSAttributedString.EnumerationOptions = [])</span></span> -&gt; [([<span class="type">Attribute</span>], <span class="type">Range</span>&lt;<span class="type">Int</span>&gt;)] &#123;</div><div class="line">    <span class="keyword">var</span> attributeRanges = [([<span class="type">Attribute</span>], <span class="type">Range</span>&lt;<span class="type">Int</span>&gt;)]()</div><div class="line">    enumerateAttributes(<span class="keyword">in</span>: range, options: options) &#123; attributes, range, <span class="number">_</span> <span class="keyword">in</span></div><div class="line">        attributeRanges.append((attributes, range))</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> attributeRanges</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//给定范围 内部调用attributeString系统提供的enumerateAttributes方法查找出所有attribute以及对应的range 形式如: ([Attribute],Range&lt;Int&gt;)</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">enumerateAttributes</span><span class="params">(<span class="keyword">in</span> enumerationRange: Range&lt;Int&gt;, options: NSAttributedString.EnumerationOptions = [], using block: <span class="params">(<span class="number">_</span> attrs: [Attribute], <span class="number">_</span> range: Range&lt;Int&gt;, <span class="number">_</span> stop: UnsafeMutablePointer&lt;ObjCBool&gt;)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">    enumerateAttributes(<span class="keyword">in</span>: <span class="type">NSRange</span>(enumerationRange), options: options) &#123; attributes, range, ptr <span class="keyword">in</span></div><div class="line">        block(attributes.swiftyAttributes, range.location ..&lt; (range.location + range.length), ptr)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//给定attribute名字，查找范围，block返回attribute的value</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">enumerateAttribute</span><span class="params">(<span class="number">_</span> attrName: Attribute.Name, <span class="keyword">in</span> enumerationRange: Range&lt;Int&gt;, options: NSAttributedString.EnumerationOptions = [], using block: <span class="params">(<span class="number">_</span> value: Any?, <span class="number">_</span> range: Range&lt;Int&gt;, <span class="number">_</span> stop: UnsafeMutablePointer&lt;ObjCBool&gt;)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">    enumerateAttribute(attrName.rawValue, <span class="keyword">in</span>: <span class="type">NSRange</span>(enumerationRange), options: options) &#123; value, range, ptr <span class="keyword">in</span></div><div class="line">        block(value, range.location ..&lt; (range.location + range.length), ptr)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面给出具体的使用范例:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> hello = <span class="string">"Hello"</span></div><div class="line"><span class="keyword">let</span> helloworld = hello.withAttributes([</div><div class="line">    .font(<span class="type">UIFont</span>.systemFont(ofSize: <span class="number">20</span>))</div><div class="line">    ]) + <span class="string">"World"</span>.withFont(<span class="type">UIFont</span>.systemFont(ofSize: <span class="number">30</span>))</div><div class="line"></div><div class="line"><span class="keyword">let</span> font20Attribute = helloworld.attribute(.font, at: <span class="number">0</span>) <span class="comment">// 0-4 返回20号字体的attribute</span></div><div class="line"><span class="keyword">let</span> font30Attribute = helloworld.attribute(.font, at: <span class="number">5</span>) <span class="comment">// 5-9 返回30号字体的attribute</span></div><div class="line"></div><div class="line"><span class="comment">//给定range </span></div><div class="line"><span class="keyword">let</span> attributes = helloworld.attributes(<span class="keyword">in</span>: <span class="number">0</span>..&lt;<span class="number">5</span>, options: [])</div><div class="line"><span class="built_in">print</span>(attributes) <span class="comment">//只有一个attribute</span></div><div class="line"></div><div class="line"><span class="comment">//&lt;如果要查出所有attribute，可以指定upper为字符串的长度&gt;</span></div><div class="line"><span class="keyword">let</span> attributes = helloworld.attributes(<span class="keyword">in</span>: <span class="number">0</span>..&lt;helloworld.length, options: [])</div><div class="line"><span class="built_in">print</span>(attributes) <span class="comment">//所有的attribute</span></div><div class="line"></div><div class="line"></div><div class="line">helloworld.enumerateAttributes(<span class="keyword">in</span>: <span class="number">0</span>..&lt;helloworld.length) &#123; (attributes, range, stop) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(attributes)</div><div class="line">    <span class="built_in">print</span>(range)</div><div class="line">&#125;</div><div class="line"><span class="comment">//打印结果 如 &lt;图1&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//给定属性和range 找出attribute的value 以及对应的range</span></div><div class="line">helloworld.enumerateAttribute(.font, <span class="keyword">in</span>: <span class="number">0</span>..&lt;helloworld.length, options: []) &#123; (value, range, stop) <span class="keyword">in</span></div><div class="line">    <span class="keyword">if</span>  value <span class="keyword">is</span> <span class="type">UIFont</span> &#123;</div><div class="line">        <span class="built_in">print</span>(value)</div><div class="line">        <span class="built_in">print</span>(range)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>图1：</p>
<p><img src="http://ww2.sinaimg.cn/large/006tNbRwgy1fepqz9vxvuj30sr027q3m.jpg" alt="Screen Shot 2017-04-17 at 4.11.00 PM"></p>
<h2 id="NSMutableAttributedString-SwiftyAttributes-swift"><a href="#NSMutableAttributedString-SwiftyAttributes-swift" class="headerlink" title="NSMutableAttributedString+SwiftyAttributes.swift"></a>NSMutableAttributedString+SwiftyAttributes.swift</h2><p>这个文件对NSMutableAttributedString进行了一个扩展，主要重新实现了NSMutableAttributedString的一些操作方法，如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在已有的attributes上 添加新的attribute</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">addAttributes</span><span class="params">(<span class="number">_</span> attributes: [Attribute], range: Range&lt;Int&gt;)</span></span> &#123;</div><div class="line">    addAttributes(attributes, range: <span class="type">NSRange</span>(range))</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">addAttributes</span><span class="params">(<span class="number">_</span> attributes: [Attribute], range: NSRange)</span></span> &#123;</div><div class="line">    addAttributes(dictionary(from: attributes), range: range)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//移除之前的attribute 重新设置attribute</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">setAttributes</span><span class="params">(<span class="number">_</span> attributes: [Attribute], range: Range&lt;Int&gt;)</span></span> &#123;</div><div class="line">    setAttributes(attributes, range: <span class="type">NSRange</span>(range))</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">setAttributes</span><span class="params">(<span class="number">_</span> attributes: [Attribute], range: NSRange)</span></span> &#123;</div><div class="line">    setAttributes(dictionary(from: attributes), range: range)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//用新的字符串替换给定范围的字符串</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">replaceCharacters</span><span class="params">(<span class="keyword">in</span> range: Range&lt;Int&gt;, with str: String)</span></span> &#123;</div><div class="line">    replaceCharacters(<span class="keyword">in</span>: <span class="type">NSRange</span>(range), with: str)</div><div class="line">&#125;</div><div class="line"><span class="comment">//用新的attributeString替换给定范围的attributeString</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">replaceCharacters</span><span class="params">(<span class="keyword">in</span> range: Range&lt;Int&gt;, with attrString: NSAttributedString)</span></span> &#123;</div><div class="line">    replaceCharacters(<span class="keyword">in</span>: <span class="type">NSRange</span>(range), with: attrString)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//移除给定范围的字符串</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">deleteCharacters</span><span class="params">(<span class="keyword">in</span> range: Range&lt;Int&gt;)</span></span> &#123;</div><div class="line">    deleteCharacters(<span class="keyword">in</span>: <span class="type">NSRange</span>(range))</div><div class="line">&#125;</div><div class="line"><span class="comment">//移除给定范围 给定的attribute</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">removeAttribute</span><span class="params">(<span class="number">_</span> name: Attribute.Name, range: Range&lt;Int&gt;)</span></span> &#123;</div><div class="line">    removeAttribute(name.rawValue, range: <span class="type">NSRange</span>(range))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体调用过程如下图：</p>
<p><img src="http://ww1.sinaimg.cn/large/006tNbRwgy1fepsv9yuiyj30o70jsq4q.jpg" alt="Screen Shot 2017-04-17 at 5.22.16 PM"></p>
<h2 id="Attribute-swift-amp-AttributeName-swift"><a href="#Attribute-swift-amp-AttributeName-swift" class="headerlink" title="Attribute.swift &amp; AttributeName.swift"></a>Attribute.swift &amp; AttributeName.swift</h2><p>Attribute是一个枚举，枚举了一些attributeString的属性。这里就列举一些我们平时常见的几个attribute。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Attribute</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//设置背景色</span></div><div class="line">  <span class="keyword">case</span> backgroundColor(<span class="type">Color</span>)</div><div class="line">  <span class="comment">//设置字体</span></div><div class="line">  <span class="keyword">case</span> font(<span class="type">Font</span>)</div><div class="line">  ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Attribute内部还实现了一个init方法，传入 <strong>Attribute.Name</strong>类型的name 和 <strong>Any</strong>类型的foundationValue，下面是这个init函数的构造方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">init</span>(name: <span class="type">Attribute</span>.<span class="type">Name</span>, foundationValue: <span class="type">Any</span>) &#123;&#125;</div></pre></td></tr></table></figure>
<p>这里引入了一个 <strong>Attribute.Name</strong>,在AttributeName.swift文件中我们可以看到它的定义，它其实也是一个枚举，定义了attribute的名字，同时实现了<strong>RawRepresentable</strong>这个协议，它的主要功能是和系统提供的string类型attribute的名字进行一个互相转换。例子如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Name</span>: <span class="title">RawRepresentable</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">case</span> font</div><div class="line">	<span class="keyword">public</span> <span class="keyword">init</span>?(rawValue: <span class="type">String</span>) &#123; <span class="comment">//此处的rawValue就是系统定义的attribute的名字，是一个字符串类型</span></div><div class="line">		<span class="keyword">switch</span> rawValue &#123;</div><div class="line">			<span class="keyword">case</span> <span class="type">NSFontAttributeName</span>: <span class="keyword">self</span> = .font</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">var</span> rawValue: <span class="type">String</span> &#123;</div><div class="line">    	<span class="keyword">var</span> name: <span class="type">String</span>!</div><div class="line">    	<span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">            <span class="keyword">case</span> .font: name = <span class="type">NSFontAttributeName</span> <span class="comment">//根据self的类型，返回对应的系统定义的string类型的属性名字</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> name</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Attribute提供了几个很重要的public属性，第一个是 <strong>keyName</strong>,该属性根据当前self所指向的枚举类型，返回对应的 <strong>Attribute.Name</strong> 的 <strong>rawValue</strong>。部分代码如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">var</span> keyName: <span class="type">String</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> name: <span class="type">Attribute</span>.<span class="type">Name</span>!</div><div class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">case</span> .font(<span class="number">_</span>): name = .font</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> name.rawValue </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另一个就是 <strong>foundationValue</strong>，</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">var</span> foundationValue: <span class="type">Any</span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>区别于另一个属性 <strong>value</strong>,</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">Any</span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>foundationValue</strong> 内部对value做了一些转换，用于返回最后操作attribute时候的value，<strong>value</strong> 就是纯粹的传入什么就返回什么。</p>
<p>Attribute同时实现了<strong>Equatable</strong>协议，重写了 == 运算符，用于比较两个attribute是否相同。具体实现如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Attribute</span>: <span class="title">Equatable</span> </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> == <span class="params">(lhs: Attribute, rhs: Attribute)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> (lhs.foundationValue <span class="keyword">as</span>? <span class="type">NSObject</span>) == (rhs.foundationValue <span class="keyword">as</span>? <span class="type">NSObject</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Attribute-Sequence-swift"><a href="#Attribute-Sequence-swift" class="headerlink" title="Attribute+Sequence.swift"></a>Attribute+Sequence.swift</h2><p>提供了[String:Any] 和 [Attribute] 之间的互相转换</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> <span class="title">where</span> <span class="title">Iterator</span>.<span class="title">Element</span> == (<span class="title">key</span>: <span class="title">String</span>, <span class="title">value</span>: <span class="title">Any</span>) </span>&#123;</div><div class="line">    <span class="comment">//将 [String:Any] 转换为 [Attribute]</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> swiftyAttributes: [<span class="type">Attribute</span>] &#123;</div><div class="line">        <span class="keyword">return</span> flatMap &#123; name, value <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> attrName = <span class="type">Attribute</span>.<span class="type">Name</span>(rawValue: name) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="type">Attribute</span>(name: attrName, foundationValue: value)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> <span class="title">where</span> <span class="title">Iterator</span>.<span class="title">Element</span> == <span class="title">Attribute</span> </span>&#123;</div><div class="line">	<span class="comment">//将 [Attribute] 转换为 [String:Any]</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> foundationAttributes: [<span class="type">String</span>: <span class="type">Any</span>] &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">reduce</span>([<span class="type">String</span>: <span class="type">Any</span>]()) &#123; dictionary, attribute <span class="keyword">in</span></div><div class="line">            <span class="keyword">var</span> dict = dictionary</div><div class="line">            dict[attribute.keyName] = attribute.foundationValue</div><div class="line">            <span class="keyword">return</span> dict</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用范例如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foundationAttributes:[<span class="type">String</span>: <span class="type">Any</span>] = [<span class="type">NSForegroundColorAttributeName</span>:<span class="type">UIColor</span>.red,<span class="type">NSFontAttributeName</span>:<span class="type">UIFont</span>.systemFont(ofSize: <span class="number">30</span>)]</div><div class="line"><span class="keyword">let</span> attributes = foundationAttributes.swiftyAttributes</div><div class="line"></div><div class="line"><span class="keyword">let</span> attributes = [<span class="type">Attribute</span>.font(<span class="type">UIFont</span>.systemFont(ofSize: <span class="number">30</span>)),<span class="type">Attribute</span>.textColor(.red)]</div><div class="line"><span class="keyword">let</span> foundationAttributes = attributes.foundationAttributes</div></pre></td></tr></table></figure>
<p><strong>Operators.swift</strong> 中重载了 <strong>+</strong>  运算符，两个attributeString的拼接可以直接使用 <strong>+</strong>  来实现。</p>
<p><strong>Ligatures.swift</strong>,<strong>TextEffect.swift</strong>,<strong>VerticalGlyphForm.swift</strong>,<strong>WritingDirection.swift</strong> ,对系统的一些attribute进行了封装，以便内部的调用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次介绍的是一个很好用的第三方库 &lt;strong&gt;SwiftyAttributes&lt;/strong&gt; ,顾名思义就是用来操作attributeString的。首先我们先来看一下传统方式创建一个attributeString，是怎么实现的，代码如下:&lt;/p&gt;
&lt;figure 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kingfisher源码浅析系列文章 Part5</title>
    <link href="http://yoursite.com/2017/04/12/KingfisherOptionsInfo/"/>
    <id>http://yoursite.com/2017/04/12/KingfisherOptionsInfo/</id>
    <published>2017-04-12T08:39:11.000Z</published>
    <updated>2017-04-12T08:43:39.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//KingfisherOptionsInfo用于控制图片的一些行为，行为由一系列的枚举 (KingfisherOptionsInfoItem)来定义。</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">KingfisherOptionsInfo</span> = [<span class="type">KingfisherOptionsInfoItem</span>]</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//枚举的类型如下 这边主要介绍几个常用的</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">KingfisherOptionsInfoItem</span> </span>&#123;</div><div class="line">  	</div><div class="line">  	<span class="comment">//可以指定cache 用于存储下载好的图片和读取本地的图片</span></div><div class="line">  	<span class="keyword">case</span> targetCache(<span class="type">ImageCache</span>)</div><div class="line">  	</div><div class="line">  	<span class="comment">//用于下载图片</span></div><div class="line">  	<span class="keyword">case</span> downloader(<span class="type">ImageDownloader</span>)</div><div class="line">  	</div><div class="line">  	<span class="comment">//用于对图片进行动画过度</span></div><div class="line">  	<span class="keyword">case</span> transition(<span class="type">ImageTransition</span>)</div><div class="line">  	</div><div class="line">  	<span class="comment">//用于处理图片 eg.圆角 裁剪 遮罩..</span></div><div class="line">  	<span class="keyword">case</span> processor(<span class="type">ImageProcessor</span>)</div><div class="line">  	</div><div class="line">  	........</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//KingfisherOptionsInfo是一个Array Collection是Array的一个协议 这边对Collection进行一个扩展 便于外部直接获取相应的控制图片的行为</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">Collection</span> <span class="title">where</span> <span class="title">Iterator</span>.<span class="title">Element</span> == <span class="title">KingfisherOptionsInfoItem</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> processor: <span class="type">ImageProcessor</span> &#123;</div><div class="line">    	<span class="comment">//从数组中寻找匹配的元素 如果没有与之匹配的 就返回默认的</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> item = firstMatchIgnoringAssociatedValue(.processor(<span class="type">DefaultImageProcessor</span>.<span class="keyword">default</span>)),</div><div class="line">            <span class="keyword">case</span> .processor(<span class="keyword">let</span> processor) = item</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> processor</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="type">DefaultImageProcessor</span>.<span class="keyword">default</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Collection</span> <span class="title">where</span> <span class="title">Iterator</span>.<span class="title">Element</span> == <span class="title">KingfisherOptionsInfoItem</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="comment">//从数组中寻找第一个和传入value匹配的元素 然后返回该元素</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">firstMatchIgnoringAssociatedValue</span><span class="params">(<span class="number">_</span> target: Iterator.Element)</span></span> -&gt; <span class="type">Iterator</span>.<span class="type">Element</span>? &#123;</div><div class="line">        <span class="keyword">return</span> index &#123; $<span class="number">0</span> &lt;== target &#125;.flatMap &#123; <span class="keyword">self</span>[$<span class="number">0</span>] &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//从数组中获取非指定元素的其他元素</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeAllMatchesIgnoringAssociatedValue</span><span class="params">(<span class="number">_</span> target: Iterator.Element)</span></span> -&gt; [<span class="type">Iterator</span>.<span class="type">Element</span>] &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.<span class="built_in">filter</span> &#123; !($<span class="number">0</span> &lt;== target) &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">precedencegroup <span class="type">ItemComparisonPrecedence</span> &#123;</div><div class="line">    <span class="keyword">associativity</span>: <span class="keyword">none</span></div><div class="line">    higherThan: <span class="type">LogicalConjunctionPrecedence</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> &lt;== : <span class="type">ItemComparisonPrecedence</span></div><div class="line"></div><div class="line"><span class="comment">//自定义运算符 &lt;== 用于判断两个KingfisherOptionsInfoItem 是否相同。</span></div><div class="line"><span class="function"><span class="keyword">func</span> &lt;== (lhs: KingfisherOptionsInfoItem, rhs: KingfisherOptionsInfoItem) -&gt; <span class="title">Bool</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (lhs, rhs) &#123;</div><div class="line">    <span class="keyword">case</span> (.targetCache(<span class="number">_</span>), .targetCache(<span class="number">_</span>)): <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kingfisher源码浅析系列文章 Part4</title>
    <link href="http://yoursite.com/2017/04/12/Image/"/>
    <id>http://yoursite.com/2017/04/12/Image/</id>
    <published>2017-04-12T08:38:11.000Z</published>
    <updated>2017-04-12T08:43:27.000Z</updated>
    
    <content type="html"><![CDATA[<p> <code>Image.swift</code> 主要是一些处理图片的extension, 包括<strong>Properties</strong>,<strong>Conversion</strong>,<strong>Representation</strong>,</p>
<p><strong>Create images from data</strong>,<strong>Transforming</strong>,<strong>Decode</strong>。</p>
<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties:"></a>Properties:</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给Image扩展了一些属性</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Kingfisher</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">Image</span> </span>&#123;</div><div class="line">    fileprivate(<span class="keyword">set</span>) <span class="keyword">var</span> animatedImageData: <span class="type">Data</span>? </div><div class="line">    <span class="keyword">var</span> cgImage: <span class="type">CGImage</span>? </div><div class="line">    <span class="keyword">var</span> scale: <span class="type">CGFloat</span> </div><div class="line">    <span class="keyword">var</span> images: [<span class="type">Image</span>]? </div><div class="line">    <span class="keyword">var</span> duration: <span class="type">TimeInterval</span></div><div class="line">    fileprivate(<span class="keyword">set</span>) <span class="keyword">var</span> imageSource: <span class="type">ImageSource</span>?</div><div class="line">    <span class="keyword">var</span> size: <span class="type">CGSize</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Conversion"><a href="#Conversion" class="headerlink" title="Conversion:"></a>Conversion:</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义了一些转换Image的方法</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Kingfisher</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">Image</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//转换Image</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">image</span><span class="params">(cgImage: CGImage, scale: CGFloat, refImage: Image?)</span></span> -&gt; <span class="type">Image</span> &#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//标准化Image,该方法将会加入Scale和Orientation来重新绘制Image</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> normalized: <span class="type">Image</span> &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//转换gif Image</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">animated</span><span class="params">(with images: [Image], forDuration duration: TimeInterval)</span></span> -&gt; <span class="type">Image</span>? &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Representation："><a href="#Representation：" class="headerlink" title="Representation："></a>Representation：</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义了 由PNG,JPEG,GIF 生成Data的方法</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Kingfisher</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">Image</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//将PNG图片转换成Data</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">pngRepresentation</span><span class="params">()</span></span> -&gt; <span class="type">Data</span>? &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//将JPEG图片转换成Data</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">jpegRepresentation</span><span class="params">(compressionQuality: CGFloat)</span></span> -&gt; <span class="type">Data</span>? &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//将GIF图片转换成Data</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">gifRepresentation</span><span class="params">()</span></span> -&gt; <span class="type">Data</span>? &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Create-images-from-data"><a href="#Create-images-from-data" class="headerlink" title="Create images from data:"></a>Create images from data:</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将Data生成Image</span></div><div class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">image</span><span class="params">(data: Data, scale: CGFloat, preloadAllGIFData: Bool, onlyFirstFrame: Bool)</span></span> -&gt; <span class="type">Image</span>? &#123;</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="Transforming："><a href="#Transforming：" class="headerlink" title="Transforming："></a>Transforming：</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给图片加圆角</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">image</span><span class="params">(withRoundRadius radius: CGFloat, fit size: CGSize)</span></span> -&gt; <span class="type">Image</span> &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//裁剪图片</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">resize</span><span class="params">(to size: CGSize, <span class="keyword">for</span> contentMode: ContentMode)</span></span> -&gt; <span class="type">Image</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//给图片添加毛玻璃效果</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">blurred</span><span class="params">(withRadius radius: CGFloat)</span></span> -&gt; <span class="type">Image</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//给图片添加遮罩</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">overlaying</span><span class="params">(with color: Color, fraction: CGFloat)</span></span> -&gt; <span class="type">Image</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//以下两种方式 涉及到滤镜 详见Filter.swift </span></div><div class="line"><span class="comment">//给图片添加彩色滤镜效果 </span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">tinted</span><span class="params">(with color: Color)</span></span> -&gt; <span class="type">Image</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//色度调整滤镜效果</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">adjusted</span><span class="params">(brightness: CGFloat, contrast: CGFloat, saturation: CGFloat, inputEV: CGFloat)</span></span> -&gt; <span class="type">Image</span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Decode"><a href="#Decode" class="headerlink" title="Decode:"></a>Decode:</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> decoded: <span class="type">Image</span>? &#123;</div><div class="line">    <span class="keyword">return</span> decoded(scale: scale)</div><div class="line">&#125;</div><div class="line"><span class="comment">//对图片进行解码 重新绘制    </span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">decoded</span><span class="params">(scale: CGFloat)</span></span> -&gt; <span class="type">Image</span> &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上都是处理图片的一些方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">KingfisherCompatible</span> </span>&#123;</div><div class="line">    associatedtype <span class="type">CompatibleType</span></div><div class="line">    <span class="keyword">var</span> kf: <span class="type">CompatibleType</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//========对Data的添加的扩展方法=============</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">DataProxy</span> </span>&#123;</div><div class="line">    fileprivate <span class="keyword">let</span> base: <span class="type">Data</span></div><div class="line">    <span class="keyword">init</span>(proxy: <span class="type">Data</span>) &#123;</div><div class="line">        base = proxy</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Data</span>: <span class="title">KingfisherCompatible</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">CompatibleType</span> = <span class="type">DataProxy</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> kf: <span class="type">DataProxy</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">DataProxy</span>(proxy: <span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DataProxy</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> imageFormat: <span class="type">ImageFormat</span> &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//========对Data的添加的扩展方法=============</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//========对CGSize的添加的扩展方法=============</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">CGSizeProxy</span> </span>&#123;</div><div class="line">    fileprivate <span class="keyword">let</span> base: <span class="type">CGSize</span></div><div class="line">    <span class="keyword">init</span>(proxy: <span class="type">CGSize</span>) &#123;</div><div class="line">        base = proxy</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CGSize</span>: <span class="title">KingfisherCompatible</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">CompatibleType</span> = <span class="type">CGSizeProxy</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> kf: <span class="type">CGSizeProxy</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">CGSizeProxy</span>(proxy: <span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CGSizeProxy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">constrained</span><span class="params">(<span class="number">_</span> size: CGSize)</span></span> -&gt; <span class="type">CGSize</span> &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> aspectRatio: <span class="type">CGFloat</span> &#123;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//========对CGSize的添加的扩展方法=============</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;code&gt;Image.swift&lt;/code&gt; 主要是一些处理图片的extension, 包括&lt;strong&gt;Properties&lt;/strong&gt;,&lt;strong&gt;Conversion&lt;/strong&gt;,&lt;strong&gt;Representation&lt;/strong&gt;,
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kingfisher源码浅析系列文章 Part3</title>
    <link href="http://yoursite.com/2017/04/12/ImageProcessor/"/>
    <id>http://yoursite.com/2017/04/12/ImageProcessor/</id>
    <published>2017-04-12T08:37:13.000Z</published>
    <updated>2017-04-12T08:43:05.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用于将下载下来的图片进行处理</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ImageProcessor</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">//用于标识Process (同样url的图片，如果Process不一样 比如一个圆角是20一个是10，那本地就会保存两张图片，还是会从网络再次获取原始图片，然后做一个圆角为10的处理生成新的图片，所以标识是url + identifier)</span></div><div class="line">    <span class="keyword">var</span> identifier: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//用于具体实现处理图片</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(item: ImageProcessItem, options: KingfisherOptionsInfo)</span></span> -&gt; <span class="type">Image</span>?</div><div class="line">&#125;</div><div class="line"><span class="comment">//Process接受的图片数据</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ImageProcessItem</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> image(<span class="type">Image</span>)</div><div class="line">    <span class="keyword">case</span> data(<span class="type">Data</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下都是具体处理图片的Process，通过实现ImageProcessor协议来实现具体功能。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="type">DefaultImageProcessor</span>  <span class="comment">//默认的Process 不对图片进行处理，</span></div><div class="line"></div><div class="line"><span class="type">RoundCornerImageProcessor</span> <span class="comment">//绘制圆角</span></div><div class="line"></div><div class="line"><span class="type">ResizingImageProcessor</span> <span class="comment">//裁剪</span></div><div class="line"></div><div class="line"><span class="type">BlurImageProcessor</span> <span class="comment">//毛玻璃</span></div><div class="line"></div><div class="line"><span class="type">OverlayImageProcessor</span> <span class="comment">//遮罩</span></div><div class="line"></div><div class="line"><span class="comment">//以下三种都是滤镜效果</span></div><div class="line"><span class="type">TintImageProcessor</span> </div><div class="line"></div><div class="line"><span class="type">ColorControlsProcessor</span></div><div class="line"></div><div class="line"><span class="type">BlackWhiteProcessor</span></div></pre></td></tr></table></figure>
<p>拿RoundCornerImageProcessor来解释以下Process的过程:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">DefaultImageProcessor</span>: <span class="title">ImageProcessor</span> </span>&#123;</div><div class="line">    .......</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(item: ImageProcessItem, options: KingfisherOptionsInfo)</span></span> -&gt; <span class="type">Image</span>? &#123;</div><div class="line">        <span class="keyword">switch</span> item &#123;</div><div class="line">        <span class="keyword">case</span> .image(<span class="keyword">let</span> image):</div><div class="line">            <span class="keyword">return</span> image</div><div class="line">        <span class="keyword">case</span> .data(<span class="keyword">let</span> data):</div><div class="line">			<span class="comment">//将Data生成Image 然后返回 (伪代码)</span></div><div class="line">			<span class="keyword">return</span> <span class="type">Image</span>(data)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">RoundCornerImageProcessor</span>: <span class="title">ImageProcessor</span> </span>&#123;</div><div class="line">	</div><div class="line">	..........</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(item: ImageProcessItem, options: KingfisherOptionsInfo)</span></span> -&gt; <span class="type">Image</span>? &#123;</div><div class="line">        <span class="keyword">switch</span> item &#123;</div><div class="line">        <span class="keyword">case</span> .image(<span class="keyword">let</span> image):</div><div class="line">        	<span class="comment">//给image绘制好圆角后返回</span></div><div class="line">			<span class="keyword">return</span> </div><div class="line">        <span class="keyword">case</span> .data(<span class="number">_</span>):</div><div class="line">        	<span class="comment">//这边有一个 &gt;&gt; 运算符，它的作用是将两个Process进行组合，先通过DefaultImageProcessor处理一遍，将Data转换成Image，然后再通过self的Processz进行图片的圆角处理，最后返回处理好的图片</span></div><div class="line">            <span class="keyword">return</span> (<span class="type">DefaultImageProcessor</span>.<span class="keyword">default</span> &gt;&gt; <span class="keyword">self</span>).process(item: item, options: options)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//ImageProcessor自己实现了一个append方法，用于两个Process的组合</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">ImageProcessor</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(another: ImageProcessor)</span></span> -&gt; <span class="type">ImageProcessor</span> &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//自定义了一个 &gt;&gt; 运算符，方便Process的组合。</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> &gt;&gt;<span class="params">(<span class="keyword">left</span>: ImageProcessor, <span class="keyword">right</span>: ImageProcessor)</span></span> -&gt; <span class="type">ImageProcessor</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">left</span>.append(another: <span class="keyword">right</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kingfisher源码浅析系列文章 Part2</title>
    <link href="http://yoursite.com/2017/04/12/ImageCache/"/>
    <id>http://yoursite.com/2017/04/12/ImageCache/</id>
    <published>2017-04-12T08:37:12.000Z</published>
    <updated>2017-04-12T08:42:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>ImageCache主要实现了图片的存储，删除和查找的功能，具体体现在以下几个函数:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//存储</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">store</span><span class="params">(<span class="number">_</span> image: Image,</span></span></div><div class="line">                      original: Data? = <span class="literal">nil</span>,</div><div class="line">                      forKey key: String,</div><div class="line">                      processorIdentifier identifier: String = <span class="string">""</span>,</div><div class="line">                      cacheSerializer serializer: CacheSerializer = DefaultCacheSerializer.<span class="keyword">default</span>,</div><div class="line">                      toDisk: Bool = <span class="literal">true</span>,</div><div class="line">                      completionHandler: <span class="params">(<span class="params">()</span></span> -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span>)&#123;&#125;</div><div class="line">                      </div><div class="line"><span class="comment">//删除</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeImage</span><span class="params">(forKey key: String,</span></span></div><div class="line">                          processorIdentifier identifier: String = <span class="string">""</span>,</div><div class="line">                          fromDisk: Bool = <span class="literal">true</span>,</div><div class="line">                          completionHandler: <span class="params">(<span class="params">()</span></span> -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span>)&#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//查找</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">retrieveImage</span><span class="params">(forKey key: String,</span></span></div><div class="line">                               options: KingfisherOptionsInfo?,</div><div class="line">                     completionHandler: <span class="params">(<span class="params">(Image?, CacheType)</span></span> -&gt; ())?) -&gt; <span class="type">RetrieveImageDiskTask</span>?&#123;&#125;</div></pre></td></tr></table></figure>
<p>其中存储和删除功能就不多说了，比较好理解，主要学习一下查找功能的实现。查找功能部分代码如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> completionHandler = completionHandler <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> block: <span class="type">RetrieveImageDiskTask</span>?</div><div class="line"><span class="keyword">let</span> options = options ?? <span class="type">KingfisherEmptyOptionsInfo</span></div><div class="line"></div><div class="line"><span class="comment">//先从内存中去查找图片</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> image = <span class="keyword">self</span>.retrieveImageInMemoryCache(forKey: key, options: options) &#123;</div><div class="line">    options.callbackDispatchQueue.safeAsync &#123;</div><div class="line">        completionHandler(image, .memory)</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//内存中未找到缓存 再去从磁盘查找</span></div><div class="line">	 </div><div class="line">    <span class="keyword">var</span> sSelf: <span class="type">ImageCache</span>! = <span class="keyword">self</span> <span class="comment">//这边强引用一下self，保证block中的代码能够完整执行</span></div><div class="line">    </div><div class="line">    <span class="comment">//这边实现了一个DispatchWorkItem,将查找过程包裹进去</span></div><div class="line">    block = <span class="type">DispatchWorkItem</span>(block: &#123;</div><div class="line">    	  </div><div class="line">    	  <span class="comment">//从磁盘中查找图片 </span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> image = sSelf.retrieveImageInDiskCache(forKey: key, options: options) &#123;</div><div class="line">	  <span class="comment">//需要对图片进行后台解码</span></div><div class="line">            <span class="keyword">if</span> options.backgroundDecode &#123;</div><div class="line">		  </div><div class="line">                sSelf.processQueue.async &#123;</div><div class="line"></div><div class="line">                    <span class="keyword">let</span> result = image.kf.decoded(scale: options.scaleFactor)</div><div class="line">			  <span class="comment">//将解码之后的图片存储在内存中</span></div><div class="line">                    sSelf.store(result,</div><div class="line">                                forKey: key,</div><div class="line">                                processorIdentifier: options.processor.identifier,</div><div class="line">                                cacheSerializer: options.cacheSerializer,</div><div class="line">                                toDisk: <span class="literal">false</span>,</div><div class="line">                                completionHandler: <span class="literal">nil</span>)</div><div class="line">                    <span class="comment">//回调出去解码之后的图片 </span></div><div class="line">                    options.callbackDispatchQueue.safeAsync &#123;</div><div class="line">                        completionHandler(result, .memory)</div><div class="line">                        sSelf = <span class="literal">nil</span> <span class="comment">//置空sSelf,避免内存泄漏</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//将从磁盘读取的图片在内存存储一份</span></div><div class="line">                sSelf.store(image,</div><div class="line">                            forKey: key,</div><div class="line">                            processorIdentifier: options.processor.identifier,</div><div class="line">                            cacheSerializer: options.cacheSerializer,</div><div class="line">                            toDisk: <span class="literal">false</span>,</div><div class="line">                            completionHandler: <span class="literal">nil</span></div><div class="line">                )</div><div class="line">                <span class="comment">//回调出去查找到的图片</span></div><div class="line">                options.callbackDispatchQueue.safeAsync &#123;</div><div class="line">                    completionHandler(image, .disk)</div><div class="line">                    sSelf = <span class="literal">nil</span> </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            options.callbackDispatchQueue.safeAsync &#123;</div><div class="line">                completionHandler(<span class="literal">nil</span>, .<span class="keyword">none</span>)</div><div class="line">                sSelf = <span class="literal">nil</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line"> <span class="comment">// 将查找任务异步分发到串行队列ioQueue，顺序执行</span></div><div class="line">    sSelf.ioQueue.async(execute: block!)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> block</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ImageCache主要实现了图片的存储，删除和查找的功能，具体体现在以下几个函数:&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/di
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kingfisher源码浅析系列文章 Part1</title>
    <link href="http://yoursite.com/2017/04/12/ImageDownloader/"/>
    <id>http://yoursite.com/2017/04/12/ImageDownloader/</id>
    <published>2017-04-12T08:37:11.000Z</published>
    <updated>2017-04-12T08:42:35.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//图片下载进度的回调</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">ImageDownloaderProgressBlock</span> = <span class="type">DownloadProgressBlock</span></div><div class="line"></div><div class="line"><span class="comment">//获取到图片时（包括下载和从磁盘读取）的回调</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">ImageDownloaderCompletionHandler</span> = ((<span class="number">_</span> image: <span class="type">Image</span>?, <span class="number">_</span> error: <span class="type">NSError</span>?, <span class="number">_</span> url: <span class="type">URL</span>?, <span class="number">_</span> originalData: <span class="type">Data</span>?) -&gt; ())</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 图片下载的单个任务</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">RetrieveImageDownloadTask</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">//用于存储下载图片的网络Task</span></div><div class="line">    <span class="keyword">let</span> internalTask: <span class="type">URLSessionDataTask</span></div><div class="line">    </div><div class="line">	<span class="comment">//用于持有执行该任务的Downloader，这里用了 weak 关键字 是为了避免Task和Downloader的互相持有，导致循环引用</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">weak</span> <span class="keyword">var</span> ownerDownloader: <span class="type">ImageDownloader</span>?</div><div class="line"></div><div class="line">	<span class="comment">//取消下载</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">()</span></span> &#123;</div><div class="line">        ownerDownloader?.cancelDownloadingTask(<span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//图片的地址 也是该Task的唯一标示</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> url: <span class="type">URL</span>? &#123;</div><div class="line">        <span class="keyword">return</span> internalTask.originalRequest?.url</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//Task的优先级</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> priority: <span class="type">Float</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> internalTask.priority</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            internalTask.priority = newValue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ImageFetchLoad,包在ImageDownloader内部的一个class,用于处理一个URL多处调用的场景。部分代码如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">open <span class="class"><span class="keyword">class</span> <span class="title">ImageDownloader</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ImageFetchLoad</span> </span>&#123;</div><div class="line">    </div><div class="line">    	<span class="comment">/*</span></div><div class="line">    		这里定义了一个数组，数组里面的元素是tuples,</div><div class="line">    		tuples的第一个值是回调，第二个值是控制图片下载行为(比如图片从缓存读取，图片是否处理)</div><div class="line">    	*/</div><div class="line">        <span class="keyword">var</span> contents = [(callback: <span class="type">CallbackPair</span>, options: <span class="type">KingfisherOptionsInfo</span>)]()</div><div class="line">        </div><div class="line">        <span class="comment">//图片的元数据</span></div><div class="line">        <span class="keyword">var</span> responseData = <span class="type">NSMutableData</span>()</div><div class="line">		</div><div class="line">		<span class="comment">//同一时刻下载该图片的数目</span></div><div class="line">        <span class="keyword">var</span> downloadTaskCount = <span class="number">0</span></div><div class="line">        </div><div class="line">        <span class="comment">//用于下载图片的Task</span></div><div class="line">        <span class="keyword">var</span> downloadTask: <span class="type">RetrieveImageDownloadTask</span>?</div><div class="line">    &#125;</div><div class="line"> 	</div><div class="line">	</div><div class="line">	<span class="comment">//用于保存下载每一张图片的ImageFetchLoad</span></div><div class="line">    <span class="keyword">var</span> fetchLoads = [<span class="type">URL</span>: <span class="type">ImageFetchLoad</span>]()</div><div class="line">    </div><div class="line">    <span class="comment">//下载的委托，具体实现图片下载的网络回调</span></div><div class="line">    fileprivate <span class="keyword">let</span> sessionHandler: <span class="type">ImageDownloaderSessionHandler</span></div><div class="line">    </div><div class="line">    ........</div></pre></td></tr></table></figure>
<p>接下来主要看一下下载部分的逻辑：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadImage</span><span class="params">(with url: URL,</span></span></div><div class="line">              retrieveImageTask: RetrieveImageTask?,</div><div class="line">                        options: KingfisherOptionsInfo?,</div><div class="line">                  progressBlock: ImageDownloaderProgressBlock?,</div><div class="line">              completionHandler: ImageDownloaderCompletionHandler?) -&gt; <span class="type">RetrieveImageDownloadTask</span>?</div><div class="line">    &#123; </div><div class="line">        <span class="keyword">var</span> downloadTask: <span class="type">RetrieveImageDownloadTask</span>?</div><div class="line">        </div><div class="line">        setup(progressBlock: progressBlock, with: completionHandler, <span class="keyword">for</span>: url, options: options) &#123;(session, fetchLoad) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">        	</div><div class="line">        	<span class="comment">//如果该下载任务没有创建过，则创建</span></div><div class="line">            <span class="keyword">if</span> fetchLoad.downloadTask == <span class="literal">nil</span> &#123;</div><div class="line">				</div><div class="line">				<span class="comment">//创建下载任务</span></div><div class="line">                <span class="keyword">let</span> dataTask = session.dataTask(with: request)</div><div class="line">                </div><div class="line">                fetchLoad.downloadTask = <span class="type">RetrieveImageDownloadTask</span>(internalTask: dataTask, ownerDownloader: <span class="keyword">self</span>)</div><div class="line"></div><div class="line">                dataTask.priority = options?.downloadPriority ?? <span class="type">URLSessionTask</span>.defaultPriority</div><div class="line">                </div><div class="line">                <span class="comment">//开启下载</span></div><div class="line">                dataTask.resume()</div><div class="line">                </div><div class="line">                <span class="comment">// 保存ImageDownloader的实例</span></div><div class="line">                <span class="keyword">self</span>.sessionHandler.downloadHolder = <span class="keyword">self</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">			<span class="comment">//统计该fetchLoad的下载任务数目</span></div><div class="line">            fetchLoad.downloadTaskCount += <span class="number">1</span></div><div class="line">            downloadTask = fetchLoad.downloadTask</div><div class="line">            </div><div class="line">            retrieveImageTask?.downloadTask = downloadTask</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> downloadTask</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">(progressBlock: ImageDownloaderProgressBlock?, with completionHandler: ImageDownloaderCompletionHandler?, <span class="keyword">for</span> url: URL, options: KingfisherOptionsInfo?, started: <span class="params">(<span class="params">(URLSession, ImageFetchLoad)</span></span></span></span> -&gt; <span class="type">Void</span>)) &#123;</div><div class="line">		</div><div class="line">		<span class="comment">//这里加上barrier 是因为对变量fetchLoads有读写删的操作，保证fetchLoads的安全性</span></div><div class="line">        barrierQueue.sync(flags: .barrier) &#123;</div><div class="line">        	<span class="comment">//以url为唯一标识从fetchLoads里面寻找有没有对应的fetchLoad，如果没有则需要创建</span></div><div class="line">            <span class="keyword">let</span> loadObjectForURL = fetchLoads[url] ?? <span class="type">ImageFetchLoad</span>()</div><div class="line">            </div><div class="line">            <span class="comment">//将progress和completion的clouser以及options，以tuples的形式组装好，存入到fetchLoad的实例变量contents中。</span></div><div class="line">            <span class="keyword">let</span> callbackPair = (progressBlock: progressBlock, completionHandler: completionHandler)</div><div class="line">            loadObjectForURL.contents.append((callbackPair, options ?? <span class="type">KingfisherEmptyOptionsInfo</span>))</div><div class="line">            </div><div class="line">            <span class="comment">//将fetchLoad的实例保存起来。(如果有则覆盖旧的)</span></div><div class="line">            fetchLoads[url] = loadObjectForURL</div><div class="line">            </div><div class="line">            <span class="comment">//创建下载任务</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> session = session &#123;</div><div class="line">                started(session, loadObjectForURL)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>图片下载的网络回调委托了类ImageDownloaderSessionHandler来实现，该类实现了URLSessionDataDelegate协议，具体实现如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageDownloaderSessionHandler</span>: <span class="title">NSObject</span>, <span class="title">URLSessionDataDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> downloadHolder: <span class="type">ImageDownloader</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, dataTask: URLSessionDataTask, didReceive response: URLResponse, completionHandler: @escaping <span class="params">(URLSession.ResponseDisposition)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//如果downloader实例为空，则该请求视为已经取消</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> downloader = downloadHolder <span class="keyword">else</span> &#123;</div><div class="line">            completionHandler(.cancel)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//根据response返回的状态码判断该请求是否有效</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> statusCode = (response <span class="keyword">as</span>? <span class="type">HTTPURLResponse</span>)?.statusCode,</div><div class="line">           <span class="keyword">let</span> url = dataTask.originalRequest?.url,</div><div class="line">            !(downloader.delegate ?? downloader).isValidStatusCode(statusCode, <span class="keyword">for</span>: downloader)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">let</span> error = <span class="type">NSError</span>(domain: <span class="type">KingfisherErrorDomain</span>,</div><div class="line">                                code: <span class="type">KingfisherError</span>.invalidStatusCode.rawValue,</div><div class="line">                                userInfo: [<span class="type">KingfisherErrorStatusCodeKey</span>: statusCode, <span class="type">NSLocalizedDescriptionKey</span>: <span class="type">HTTPURLResponse</span>.localizedString(forStatusCode: statusCode)])</div><div class="line">            callCompletionHandlerFailure(error: error, url: url)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        completionHandler(.allow)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, dataTask: URLSessionDataTask, didReceive data: Data)</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> downloader = downloadHolder <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">		</div><div class="line">		<span class="comment">//从downloader中根据url取出fetchload</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> url = dataTask.originalRequest?.url, <span class="keyword">let</span> fetchLoad = downloader.fetchLoad(<span class="keyword">for</span>: url) &#123;</div><div class="line">        	</div><div class="line">        	<span class="comment">//保存数据</span></div><div class="line">            fetchLoad.responseData.append(data)</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> expectedLength = dataTask.response?.expectedContentLength &#123;</div><div class="line">            </div><div class="line">            	<span class="comment">//从fetchLoad的contents中遍历取出closure (一个url在多个地方同时发起请求)</span></div><div class="line">                <span class="keyword">for</span> content <span class="keyword">in</span> fetchLoad.contents &#123;</div><div class="line">                    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                        content.callback.progressBlock?(<span class="type">Int64</span>(fetchLoad.responseData.length), expectedLength)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url = task.originalRequest?.url <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//下载结束</span></div><div class="line">        <span class="keyword">guard</span> error == <span class="literal">nil</span> <span class="keyword">else</span> &#123;</div><div class="line">            callCompletionHandlerFailure(error: error!, url: url)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//下载成功 处理下载后的元数据</span></div><div class="line">        processImage(<span class="keyword">for</span>: task, url: url)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">     </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">processImage</span><span class="params">(<span class="keyword">for</span> task: URLSessionTask, url: URL)</span></span> &#123;</div><div class="line"></div><div class="line">        downloader.processQueue.async &#123;</div><div class="line"> </div><div class="line">            <span class="keyword">let</span> data = fetchLoad.responseData <span class="keyword">as</span> <span class="type">Data</span></div><div class="line">            </div><div class="line">			<span class="comment">//同一个URL发出的多次请求，在一次请求数据回来时对图片进行process的结果先存储起来，下一个请求的数据回来时先从cache里面寻找，如果有该process处理过的图片就不需要再次处理了，直接获取。</span></div><div class="line">            <span class="keyword">var</span> imageCache: [<span class="type">String</span>: <span class="type">Image</span>] = [:]</div><div class="line">            <span class="keyword">for</span> content <span class="keyword">in</span> fetchLoad.contents &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">let</span> options = content.options</div><div class="line">                <span class="keyword">let</span> processor = options.processor            </div><div class="line">                <span class="keyword">var</span> image = imageCache[processor.identifier]</div><div class="line">                <span class="keyword">if</span> image == <span class="literal">nil</span> &#123;</div><div class="line">                    image = processor.process(item: .data(data), options: options)</div><div class="line">                    imageCache[processor.identifier] = image</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
  </entry>
  
</feed>
